name: DCO Check

on:
  pull_request:
    branches: [ main ]

jobs:
  check-dco:
    runs-on: ubuntu-latest
    name: Check DCO
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Check Signed-off-by
      run: |
        # Create a script to check the DCO
        cat > check_dco.py << 'EOF'
        #!/usr/bin/env python3
        
        import re
        import subprocess
        import sys
        
        # Get the range of commits to check
        base_branch = "origin/main"
        result = subprocess.run(
            ["git", "merge-base", base_branch, "HEAD"],
            capture_output=True,
            text=True,
            check=True
        )
        merge_base = result.stdout.strip()
        
        # Get the list of commits to check
        result = subprocess.run(
            ["git", "rev-list", f"{merge_base}..HEAD"],
            capture_output=True,
            text=True,
            check=True
        )
        commits = result.stdout.strip().split("\n")
        
        if commits == [""]:
            print("No new commits to check.")
            sys.exit(0)
        
        # Check each commit for a DCO Signed-off-by line
        dco_regex = re.compile(r"^Signed-off-by: ([^<]+) <([^>]+)>$", re.MULTILINE)
        error_found = False
        
        for commit in commits:
            result = subprocess.run(
                ["git", "show", "-s", "--format=%B", commit],
                capture_output=True,
                text=True,
                check=True
            )
            commit_msg = result.stdout.strip()
            
            # Get committer info
            result = subprocess.run(
                ["git", "show", "-s", "--format=%an <%ae>", commit],
                capture_output=True,
                text=True,
                check=True
            )
            committer = result.stdout.strip()
            
            match = dco_regex.search(commit_msg)
            if not match:
                print(f"❌ Commit {commit[:8]} is missing a DCO Signed-off-by line.")
                print(f"   Committer: {committer}")
                print(f"   Use 'git commit -s' to sign off your commits.")
                print("")
                error_found = True
                continue
            
            # Check that the email in Signed-off-by matches the committer email
            expected = f"Signed-off-by: {committer}"
            signed_by = match.group(0)
            if signed_by != expected and not ("noreply@" in signed_by and "noreply@" in expected):
                print(f"❌ Commit {commit[:8]} has a Signed-off-by with a different email than the committer.")
                print(f"   Expected: {expected}")
                print(f"   Found:    {signed_by}")
                print("")
                error_found = True
        
        if error_found:
            print("DCO check failed. Please fix the issues above.")
            sys.exit(1)
        else:
            print("✅ All commits have proper DCO Signed-off-by lines.")
        EOF
        
        # Make the script executable
        chmod +x check_dco.py
        
        # Run the script
        ./check_dco.py